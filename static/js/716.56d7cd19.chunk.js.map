{"version":3,"file":"static/js/716.56d7cd19.chunk.js","mappings":"wMACA,EAAuB,qBAAvB,EAAmD,qBAAnD,EAAiF,uBCkBtEA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,ECjBPG,EAAQ,CACnB,CACEJ,GAAIN,IACJW,KAAM,OACNC,KAAM,KAER,CACEN,GAAIN,IACJW,KAAM,SACNC,KAAM,Y,SCPJC,EAAe,SAAC,GACpB,OADqC,EAAfC,SACP,UAAMC,EAAN,YAAkBA,GAAeA,CACjD,EAcD,EAZe,WACb,IAAMC,EAAWN,EAAMO,KAAI,gBAAGX,EAAH,EAAGA,GAAIK,EAAP,EAAOA,KAAMC,EAAb,EAAaA,KAAb,OACzB,yBACE,SAAC,KAAD,CAASM,UAAWL,EAAcM,GAAIP,EAAtC,SACGD,KAFIL,EADgB,IAQ3B,OAAO,eAAIY,UAAWH,EAAf,SAA0BC,GAClC,ECQD,EAtBe,WACb,OACE,iBACEI,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,MAAO,WANX,WASE,6BACE,SAAC,EAAD,OAGF,2BACE,SAAC,KAAD,QAIP,C","sources":["webpack://goit-react-hw-05-movies/./src/modules/NavBar/navbar.module.css?a6d4","../node_modules/nanoid/index.browser.js","modules/NavBar/items.js","modules/NavBar/NavBar.jsx","components/Layout/Layout.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"navbar_menu__uZRnn\",\"link\":\"navbar_link__AI0gQ\",\"active\":\"navbar_active__vgW2V\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\n\nexport const items = [\n  {\n    id: nanoid(),\n    text: 'Home',\n    link: '/',\n  },\n  {\n    id: nanoid(),\n    text: 'Movies',\n    link: '/movies',\n  },\n];\n","import { NavLink } from 'react-router-dom';\nimport css from './navbar.module.css';\nimport { items } from './items';\n\nconst getClassName = ({ isActive }) => {\n  return isActive ? `${css.link} ${css.active}` : css.link;\n};\n\nconst NavBar = () => {\n  const elements = items.map(({ id, text, link }) => (\n    <li key={id}>\n      <NavLink className={getClassName} to={link}>\n        {text}\n      </NavLink>\n    </li>\n  ));\n\n  return <ul className={css.menu}>{elements}</ul>;\n};\n\nexport default NavBar;\n","import { Outlet } from 'react-router-dom';\n\nimport NavBar from 'modules/NavBar/NavBar';\n\nconst Layout = () => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        color: '#010101',\n      }}\n    >\n      <header>\n        <NavBar />\n      </header>\n\n      <main>\n        <Outlet />\n      </main>\n    </div>\n  );\n};\n\nexport default Layout;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","items","text","link","getClassName","isActive","css","elements","map","className","to","style","display","flexDirection","justifyContent","alignItems","color"],"sourceRoot":""}